use kmongDB;

select * from serviceBasicInfo;

create table serviceBasicInfo(
	serviceNo int primary key not null auto_increment,
	splId varchar(50) not null,
	serviceTopCatCode varchar(30) not null,
	serviceTopCatName varchar(100) not null,
    serviceStatus varchar(100) not null default '승인대기'
);

drop table serviceTopCat;

create table serviceTopCat(
	serviceTopCatCode varchar(30) primary key,
    serviceTopCatName varchar(100) not null,
    serviceTypeChkCount int not null,
    serviceTypeChkCode varchar(30)
	-- foreign key (serviceTypeChk) references serviceType(serviceTypeCode)
);

drop table serviceTopCat;
insert into serviceTopCat(
	serviceTopCatCode, serviceTopCatName, serviceTypeChkCount, serviceTypeChkCode) values('tca01', '웹, 모바일 기획', 5, 'tca01'),
    ('tca02', '기타 기획', 5, 'tca02'),('tca03', '홈페이지', 7, 'tca03'), ('tca04', '랜딩페이지', 7, 'tca04'), ('tca05', '프론트엔드·퍼블리싱', 5, 'tca05');

 drop table serviceTypeSeq;
 create table serviceTypeSeq(
 serviceTypeCode int not null auto_increment primary key);
 select * from serviceTypeSeq;



select * from serviceTopCat;
drop table serviceType;
create table serviceType(
	serviceTypeCode varchar(30) primary key DEFAULT '0',
    serviceTypeName varchar(100) not null,
    serviceTypeInput varchar(60) not null default 'selbox'
    );




drop table serviceTypeChk;
select * from serviceTypeChk;
create table serviceTypeChk(
	serviceTypeChkCode int primary key,
    serviceTypeCode1 varchar(30),
    serviceTypeCode2 varchar(30),
    serviceTypeCode3 varchar(30),
    serviceTypeCode4 varchar(30),
    serviceTypeCode5 varchar(30),
    serviceTypeCode6 varchar(30),
    serviceTypeCode7 varchar(30),
    serviceTypeCode8 varchar(30),
    foreign key (serviceTypeChkCode) references serviceTopCat(serviceTypeChkCode)
);

insert into serviceTypeChk(
	serviceTypeChkCode, serviceTypeCode1, serviceTypeCode2, serviceTypeCode3, serviceTypeCode4, serviceTypeCode5, serviceTypeCode6)
 values	('tca01', 'stc1', 'stc2', 'sta1', 'sta2', 'sta3'),
		('tca02', 'stc1', 'stc2', 'sta1', 'sta2', 'sta3'),
		('tca03', 'stc1', 'stc2', 'stcat1', 'stdl1', 'stlib1', 'stfw1', 'stdb1'),
		('tca04', 'stc1', 'stc2', 'stwb1', 'stdl1', 'stlib1', 'stfw1', 'stdb1'),
		('tca05', 'stc1', 'stc2', 'stwb1', 'stdl1', 'stlib1', 'stfw1')
 ;

    drop table serviceTypeChk;
    select * from serviceTypeChk;

    drop table serviceType;
    SELECT * FROM serviceType;
    insert into serviceType(
		serviceTypeCode, serviceTypeName, serviceTypeValue, serviceTypeInput
    ) values('stc1', '기술수준', '초급', 'selbox'),
			('stc2', '팀규모', '2인 이상 50인 미만', 'selbox'),
            ('sta1', '플랫폼', '웹', 'mulselbox'),
            ('sta2', '기기', '콘솔', 'mulselbox'),
            ('sta3', '작업분야', '화면설계서', 'mulselbox'),
            ('stcat1', '카테고리', '개인홈페이지', 'mulselbox'),
            ('stdl1', '개발언어', 'Fortran', 'mulselbox'),
            ('stlib1', '라이브러리', 'Ajax', 'mulselbox'),
            ('stfw1', '프레임워크', 'Vue.js', 'mulselbox'),
            ('stdb1', '데이터베이스', 'MongoDB', 'mulselbox'),
            ('stwb1', '웹빌더·CMS', '고스트', 'mulselbox')

            ;

            select * from serviceType;


drop trigger serviceType_insert;

DELIMITER $$
CREATE TRIGGER serviceType_insert
BEFORE INSERT ON serviceType
FOR EACH ROW
BEGIN
INSERT INTO serviceTypeSeq VALUES (NULL);
SET NEW.serviceTypeCode = CONCAT('stc', LPAD(LAST_INSERT_ID(), 2, '0'));
END$$
DELIMITER ;

drop table serviceType;
select * from serviceType;

    insert into serviceType(
		serviceTypeName
    ) values
--     ('기술수준', '초급', 'selbox');
('기술수준'),
('팀규모'),
('플랫폼'),
('기기'),
('작업 분야'),
('개발언어'),
('라이브러리'),
('프레임워크'),
('데이터베이스'),
('웹빌더 · CMS'),
('채널'),
('서비스'),
('작업분야'),
('업종'),
('앱 분류'),
('운영체제'),
('앱 기능'),
('애플리케이션 분류'),
('기능설명'),
('소프트웨어'),
('작업 분야'),
('AI엔진'),
('노코드 카테고리'),
('노코드 소프트웨어'),
('노코드 플러그인'),
('메타버스 플랫폼'),
('블록체인 NFT 기능'),
('데이터 형태'),
('데이터 분야'),
('데이터베이스 작업 분야'),
('테스트'),
('시작파일'),
('변환파일');

insert into serviceTopCat(
	serviceTopCatCode, serviceTopCatName, serviceTypeChkCount, serviceTypeChkCode)
	values('tca01', '웹, 모바일 기획', 5, 'tca01'),
('tca02', '기타 기획', 5, 'tca02'),
('tca03', '홈페이지', 7, 'tca03'),
('tca04', '랜딩페이지', 7, 'tca04'),
('tca05', '프론트엔드 · 퍼블리싱', 5, 'tca05'),
('tca06', '검색최적화 · SEO', 4, 'tca06'),
('tca07', '애널리틱스', 4, 'tca07'),
('tca08', '홈페이지 수정 · 유지보수', 8, 'tca08'),
('tca09', '쇼핑몰', 7, 'tca09'),
('tca10', '쇼핑몰 수정 · 유지보수', 8, 'tca10'),
('tca11', '앱', 10, 'tca11'),
('tca12', '앱 수정 · 유지보수', 10, 'tca12'),
('tca13', '비지니스 애플리케이션', 10, 'tca13'),
('tca14', 'PC · 웹 프로그램', 8, 'tca14'),
('tca15', 'PC · 웹 프로그램 수정 유지보수', 9, 'tca15'),
('tca16', 'PC · 웹 프로그램 업무자동화', 9, 'tca16'),
('tca17', '백엔드 · 서버', 8, 'tca17'),
('tca18', '봇 · 챗봇', 4, 'tca18'),
('tca19', 'AI 애플리케이션 · ', 4, 'tca19'),
('tca20', '게임 · AR · VR', 2, 'tca20'),
('tca21', '노코드 · 로우코드', 5, 'tca21'),
('tca22', '메타버스', 3, 'tca22'),
('tca23', '블록체인 · NFT', 8, 'tca23'),
('tca24', '데이터 구매 · 구축', 6, 'tca24'),
('tca25', '데이터 마이닝 · 크롤링', 4, 'tca25'),
('tca26', '데이터 전처리', 4, 'tca26'),
('tca27', '데이터 라벨링', 6, 'tca27'),
('tca28', '데이터 분석 시각화', 4, 'tca28'),
('tca29', '인공지능 · 머신러닝', 4, 'tca29'),
('tca30', '데이터베이스', 4, 'tca30'),
('tca31', '하드웨어 · 임베디드', 4, 'tca31'),
('tca32', '보안', 6, 'tca32'),
('tca33', 'QA · 테스트', 5, 'tca33'),
('tca34', '컴퓨터 기술지원', 3, 'tca34'),
('tca35', '파일변환', 4, 'tca35'),
('tca36', '기타', 2, 'tca36');

select * from serviceTopCat;

